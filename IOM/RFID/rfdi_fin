#include <ESP8266WiFi.h>
#include <MySQL_Connection.h>
#include <MySQL_Cursor.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_PN532.h>

// Définir les broches pour IRQ et RESET (même si elles ne sont pas utilisées pour I2C)
#define PN532_IRQ   (2)  // Pas utilisé pour I2C
#define PN532_RESET (0)  // Pas utilisé pour I2C

// Initialisation du lecteur NFC avec I2C en spécifiant l'interface Wire
Adafruit_PN532 nfc(PN532_IRQ, PN532_RESET, &Wire);

// Informations Wi-Fi
const char* ssid = "Groupe4";
const char* password = "groupe_4";

// Informations MariaDB
IPAddress server_addr(192, 168, 1, 100);  // Adresse IP de votre serveur MariaDB
char user[] = "root";                     // Nom d'utilisateur MariaDB
char pass[] = "root_password";            // Mot de passe MariaDB
char db[] = "hospital_db";                // Base de données

WiFiClient espClient;
MySQL_Connection conn((Client *)&espClient);
MySQL_Cursor* cursor;

// Informations MQTT
const char* mqtt_server = "192.168.1.149";
WiFiClient espClientMQTT;
PubSubClient client(espClientMQTT);

// UID des badges (exemple avec des UID fictifs)
uint8_t adminUID[] = {0xDE, 0xAD, 0xBE, 0xEF};  // Administrateur
uint8_t doctorUID[] = {0xCA, 0xFE, 0xBA, 0xBE}; // Médecin
uint8_t nurseUID[] = {0xBA, 0xAD, 0xF0, 0x0D};  // Infirmière

void setup() {
  Serial.begin(115200);

  // Connexion Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connexion au Wi-Fi en cours...");
  }
  Serial.println("Connexion Wi-Fi réussie");

  // Connexion à la base de données MariaDB
  if (conn.connect(server_addr, 3306, user, pass)) {
    Serial.println("Connecté à MariaDB");
  } else {
    Serial.println("Connexion à MariaDB échouée.");
  }

  // Connexion au broker MQTT
  client.setServer(mqtt_server, 1883);
  if (client.connect("ESP8266Client")) {
    Serial.println("Connecté au broker MQTT");
  } else {
    Serial.println("Échec de la connexion au broker MQTT");
  }

  // Initialisation du module NFC
  nfc.begin();
  uint32_t versiondata = nfc.getFirmwareVersion();
  if (!versiondata) {
    Serial.println("Pas de carte PN53x détectée");
    while (1); // Boucle infinie si le module NFC n'est pas détecté
  }
  nfc.SAMConfig();
  Serial.println("En attente d'un badge NFC...");
}

void loop() {
  uint8_t success;
  uint8_t uid[7];        // Buffer pour stocker l'UID
  uint8_t uidLength;     // Longueur de l'UID

  // Lire l'UID du badge
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);

  if (success) {
    Serial.println("Badge NFC détecté !");
    Serial.print("UID : ");
    for (uint8_t i = 0; i < uidLength; i++) {
      Serial.print(" 0x"); 
      Serial.print(uid[i], HEX);
    }
    Serial.println("");  // Saut de ligne après l'affichage de l'UID

    // Vérifier le rôle du badge
    if (compareUID(uid, uidLength, adminUID, sizeof(adminUID))) {
      Serial.println("Accès administrateur accordé !");
      // Mode d'ajout de badge possible ici
      insertBadge(getUIDString(uid, uidLength), "administrateur");
    } else if (compareUID(uid, uidLength, doctorUID, sizeof(doctorUID))) {
      Serial.println("Accès médecin accordé, porte déverrouillée !");
      insertBadge(getUIDString(uid, uidLength), "medecin");
    } else if (compareUID(uid, uidLength, nurseUID, sizeof(nurseUID))) {
      Serial.println("Accès infirmière refusé.");
      insertBadge(getUIDString(uid, uidLength), "infirmiere");
    } else {
      Serial.println("Badge non reconnu.");
    }

    delay(1000);  // Délai pour éviter de lire le même badge en boucle
  }

  if (!client.connected()) {
    // Tentative de reconnexion au broker MQTT
    reconnectMQTT();
  }
  
  client.loop();  // Pour gérer les messages MQTT
}

// Fonction pour comparer les UID
bool compareUID(uint8_t *uid1, uint8_t len1, uint8_t *uid2, uint8_t len2) {
  if (len1 != len2) return false;
  for (uint8_t i = 0; i < len1; i++) {
    if (uid1[i] != uid2[i]) return false;
  }
  return true;
}

// Fonction pour insérer un badge dans la base de données
void insertBadge(String uid, String role) {
  char query[128];
  sprintf(query, "INSERT INTO badges (uid, role) VALUES ('%s', '%s')", uid.c_str(), role.c_str());

  MySQL_Cursor cursor(&conn);
  cursor.execute(query);
  Serial.println("Badge inséré dans la base de données.");
}

// Fonction pour convertir l'UID en String
String getUIDString(uint8_t *uid, uint8_t uidLength) {
  String uidStr = "";
  for (uint8_t i = 0; i < uidLength; i++) {
    uidStr += String(uid[i], HEX);
    if (i < uidLength - 1) uidStr += ":";
  }
  return uidStr;
}

// Gestion de la reconnexion au broker MQTT
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.print("Tentative de connexion au broker MQTT...");
    if (client.connect("ESP8266Client")) {
      Serial.println("Connecté au broker MQTT");
      client.subscribe("hospital/access");
    } else {
      Serial.print("Échec, rc=");
      Serial.print(client.state());
      Serial.println(" nouvelle tentative dans 5 secondes");
      delay(5000);
    }
  }
}
