#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Configuration Wi-Fi
const char* ssid = "Groupe4";  // Remplacez par votre SSID Wi-Fi
const char* password = "groupe_4";  // Remplacez par votre mot de passe Wi-Fi

// Configuration MQTT
const char* mqtt_server = "192.168.1.122";  // Remplacez par l'IP de votre Raspberry Pi

WiFiClient espClient;
PubSubClient client(espClient);

const int TEMP_PIN = A0;  // Broche A0 pour lire la température

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connexion à ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connecté");
  Serial.println("Adresse IP : ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  // Boucle jusqu'à ce que la connexion soit établie
  while (!client.connected()) {
    Serial.print("Connexion au serveur MQTT...");
    // Tente de se connecter
    if (client.connect("ESP8266TemperatureClient")) {
      Serial.println("connecté");
    } else {
      Serial.print("Échec, rc=");
      Serial.print(client.state());
      Serial.println(" nouvelle tentative dans 5 secondes");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  
  // Configuration de la connexion Wi-Fi
  setup_wifi();

  // Configurer le client MQTT
  client.setServer(mqtt_server, 1883);
}

void loop() {
  // Boucle principale du programme
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Lecture de la température
  int analogValue = analogRead(TEMP_PIN);
  float voltage = (analogValue / 1024.0) * 3.3;  // Conversion de la valeur analogique en voltage
  float temperature = voltage * 100;  // Conversion du voltage en température (LM35)

  // Affichage de la température
  Serial.print("Température: ");
  Serial.println(temperature);

  // Publication des données sur MQTT
  char msg[50];
  snprintf(msg, 50, "{\"type_capteur\":\"temp\", \"valeur\":%.2f}", temperature);
  client.publish("test/topic", msg);  // Publier un message MQTT sur "test/topic"

  delay(60000);  // Envoi de données toutes les 60 secondes
}
